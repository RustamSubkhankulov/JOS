#!/usr/bin/env python2
# -*- coding: utf-8 -*-

import re
from gradelib import *

r = Runner(save("jos.out"),
           stop_breakpoint("readline"))

@test(0, "running JOS")
def test_jos():
    r.run_qemu()

@test(40, parent=test_jos)
def test_printf():
    if r.qemu.output.find("6828 decimal is 15254 octal!") == -1:
        raise AssertionError("Missing '6828 decimal is 15254 octal!'")

BACKTRACE_RE = r"^ *rbp +00000080[0-9a-f]{8} +rip +00000080[0-9a-f]{8}"

@test(20, parent=test_jos)
def test_backtrace_count():
    matches = re.findall(BACKTRACE_RE, r.qemu.output, re.MULTILINE)
    assert_equal(len(matches), 8)

@test(20, parent=test_jos)
def test_backtrace_symbols():
    matches = re.findall(r"kern/init.c:[0-9]+: +([^+]*)\+", r.qemu.output)
    assert_equal("\n".join(matches[:7]),
                 "\n".join(["test_backtrace"] * 6 + ["i386_init"]))

@test(20, parent=test_jos)
def test_backtrace_lines():
    matches = re.findall(r"([^ ]*init.c:([0-9]+):) +test_backtrace\+", r.qemu.output)
    assert matches, "No line numbers"
    if any(int(m[1]) < 5 or int(m[1]) > 100 for m in matches):
        assert_equal("\n".join(m[0] for m in matches),
                     "Line numbers between 5 and 100")

run_tests()
